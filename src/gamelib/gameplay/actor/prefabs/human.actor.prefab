struct human_prefab_info
{
	tz::vec3 skin_colour = {1.0f, 0.875f, 0.679f};
	human_art::hair_style hair_style = human_art::hair_style::bald;
	tz::vec3 hair_colour = {0.8f, 0.0f, 0.0f};
	human_art::eye_type eye_type = human_art::eye_type::dots;
	tz::vec3 eye_colour = tz::vec3::zero();
	human_art::chest_type chest_type = human_art::chest_type::topless;
	tz::vec3 chest_colour = tz::vec3::filled(1.0f);
	human_art::feet_type feet_type = human_art::feet_type::bare;
	tz::vec3 feet_colour = tz::vec3::filled(1.0f);
	float movement_speed = 1.0f;
	actor data;
};

actor human(human_prefab_info info = {})
{
	actor ret = info.data;
	actor_entity entity =
	{
		actor_component<actor_component_id::sprite>
		{{
			.textures =
			{
				{
					// hair
					.id = image_id::undefined,
					.colour_tint = info.hair_colour
				},
				{
					// eyes
					.id = image_id::undefined,
					.colour_tint = info.eye_colour
				},
				{
					// chest equipment
					.id = image_id::undefined,
					.colour_tint = info.chest_colour
				},
				{
					// feet equipment
					.id = image_id::undefined,
					.colour_tint = info.feet_colour
				},
				{
					// base
					.id = image_id::undefined,
					.colour_tint = info.skin_colour
				}
			}
		}},
		actor_component<actor_component_id::humanoid_skeleton>
		{{
			.poses =
			{
				actor_component_params<actor_component_id::animation>
				{
					// idle
					.animations =
					{
						human_art::get_hair(info.hair_style, humanoid_skeleton_animation::idle),
						human_art::get_eyes(info.eye_type, humanoid_skeleton_animation::idle),
						human_art::get_chest(info.chest_type, humanoid_skeleton_animation::idle),
						human_art::get_feet(info.feet_type, humanoid_skeleton_animation::idle),
						animation
						{{
							.frame_textures = {image_id::race_human_base_idle0, image_id::race_human_base_idle1},
							.fps = 2,
							.loop = true
						}}	
					}
				},

				actor_component_params<actor_component_id::animation>
				{
					// move_side
					.animations =
					{
						human_art::get_hair(info.hair_style, humanoid_skeleton_animation::move_side),
						human_art::get_eyes(info.eye_type, humanoid_skeleton_animation::move_side),
						human_art::get_chest(info.chest_type, humanoid_skeleton_animation::move_side),
						human_art::get_feet(info.feet_type, humanoid_skeleton_animation::move_side),
						animation
						{{
							.frame_textures =
							{
								image_id::race_human_base_side0,
								image_id::race_human_base_side1,
								image_id::race_human_base_side2,
								image_id::race_human_base_side3
							},
							.fps = 6,
							.loop = true
						}},
					}
				},

				actor_component_params<actor_component_id::animation>
				{
					// move_up
					.animations =
					{
						std::nullopt,
						std::nullopt,
						std::nullopt,
						std::nullopt,
						std::nullopt
					}
				},

				actor_component_params<actor_component_id::animation>
				{
					// move_down
					.animations =
					{
						std::nullopt,
						std::nullopt,
						std::nullopt,
						std::nullopt,
						std::nullopt
					}
				},
			}
		}},
		actor_component<actor_component_id::motion>
		{{
			.speed = info.movement_speed
		}},
		actor_component<actor_component_id::animation>
		{{
			.animations =
			{
				std::nullopt,
				std::nullopt,
				std::nullopt,
				std::nullopt,
				std::nullopt
			}
		}},
	};
	entity.transfer_components(ret.entity);
	return std::move(ret);
}
