shader(type = fragment);
#define MAX_TEX_COUNT 8
#define BADU ~0u

import <math>
import <debug>

struct texture_locator
{
	vec3 colour_tint;
	uint texture_id;
	float texture_scale;
};

output(id = 0) vec4 out::position;
output(id = 1) vec4 out::normal;
output(id = 2) vec4 out::emissive;
output(id = 3) vec4 out::colour;
output(id = 4) vec4 out::pixelated_colour;
input(id = 0) vec3 in::position;
input(id = 1) vec2 in::texcoord;
input(id = 2) vec3 in::normal;
input(id = 3) vec3 in::colour;
input(id = 4, flat) uvec2 in::joint_suffix;
input(id = 5, flat) texture_locator in::textures[MAX_TEX_COUNT];

resource(id = 4) const texture res::textures[];

void main()
{
	vec4 outcol = vec4(vec3(0.0f), 1.0f);
	vec3 normal = in::normal;
	bool should_pixelate = bool(in::joint_suffix.x);

	texture_locator base_colour = in::textures[0];
	if(base_colour.texture_id == BADU)
	{
		// use solid white.
		outcol = vec4(base_colour.colour_tint, 1.0f);
	}
	else
	{
		vec4 col = texture(res::textures[base_colour.texture_id], in::texcoord * base_colour.texture_scale);
		if(col.w < 0.1f)
		{
			discard;
			return;
		}
		outcol.xyz = col.xyz * base_colour.colour_tint;
	}
	texture_locator normaltex = in::textures[1];
	if(normaltex.texture_id != BADU)
	{
		// green contains roughness values, blue contains metalness values.
		vec3 sampled_normal = (255.0f / 128.0f * texture(res::textures[normaltex.texture_id], in::texcoord * normaltex.texture_scale).rgb) - 1;
		normal = sampled_normal;
	}
	else if(!should_pixelate)
	{
		// we dont have a normal map applied, but we shouldnt pixelate (i.e we're a 2d sprite)
		// hardcode normal to smooth 0, 0, 1
		normal = vec3(0.0f, 0.0f, 1.0f);
	}
	texture_locator emissivetex = in::textures[2];
	if(emissivetex.texture_id != BADU)
	{
		out::emissive = texture(res::textures[emissivetex.texture_id], in::texcoord * emissivetex.texture_scale) * vec4(emissivetex.colour_tint, 1.0f);
	}
	else
	{
		out::emissive = vec4(0.0f);
	}
	outcol.xyz *= in::colour;

	normal = normalize(normal);
	// w component of the normal is currently unused. so we use it to store whether we're pixelated (1.0 if yes, otherwise 0.0)
	out::normal = vec4(normal, float(should_pixelate));
	out::position = vec4(in::position, 1.0f);

	if(should_pixelate)
	{
		// make our depth really really close to 0.
		// if we assume in::fragment_coord.z is between 0 and 1, we make our depth between 0.999-1.0, but still preserving depth order.
		// this means that the fragment we write into the unpixelated colour is almost *certainly* gonna be overwritten by something else.
		// however, the pixelated buffer will *only* contain fragments with this depth operation applied, so the depth test is preserved (if way less accurate. we're a 2d game, who cares???)
		//out::fragment_depth = 0.999f + (in::fragment_coord.z / 1000.0f);
		out::colour = vec4(0.0);
		out::pixelated_colour = outcol;
	}
	else
	{
		// stupid rule if any path writes to depth, all must do.
		// just write what the depth was gonna be anyway.
		//out::fragment_depth = in::fragment_coord.z;
		out::colour = outcol;
		out::pixelated_colour = vec4(0.0);
	}
}
