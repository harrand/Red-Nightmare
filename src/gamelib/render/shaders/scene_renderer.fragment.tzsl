shader(type = fragment);
#define MAX_TEX_COUNT 8
#define BADU ~0u

import <math>
import <debug>

struct texture_locator
{
	vec3 colour_tint;
	uint texture_id;
	float texture_scale;
};

struct point_light_data
{
	vec3 position;
	vec3 colour;
	float power;
};

output(id = 0) vec4 out::colour;
output(id = 1) vec4 out::pixelated_colour;
input(id = 0) vec3 in::position;
input(id = 1) vec2 in::texcoord;
input(id = 2) vec3 in::normal;
input(id = 3) vec3 in::colour;
input(id = 4, flat) uvec2 in::joint_suffix;
input(id = 5, flat) texture_locator in::textures[MAX_TEX_COUNT];

resource(id = 4) const buffer res::light_buffer
{
	vec3 ambient_light_colour;
	float directional_light_power;
	vec3 directional_light_colour;
	vec3 directional_light_direction;
	uint point_light_count;
	point_light_data point_lights[];	
} light;

resource(id = 5) const texture res::textures[];

// Phong Shading
float diffuse_directional(vec3 normal, bool is_2d)
{
	if(is_2d)
	{
		return 0.0f;
	}
	vec3 light_dir = normalize(light.directional_light_direction);
	float diffuse = max(dot(vec3(0.0f, 0.0f, 1.0f), normal), 0.0f);
	diffuse = light.directional_light_power * 0.5f * diffuse;
	return diffuse;
}

float diffuse(point_light_data l, vec3 normal, bool is_2d)
{
	vec3 lightDir = l.position - in::position;
	if(is_2d)
	{
		lightDir.z = 0.0f;
	}
	float distance = length(lightDir) + 1.0f;
	lightDir = normalize(lightDir);

	// Calculate the diffuse lighting component using the Phong diffuse lighting model
	float diffuse = max(dot(vec3(0.0f, 0.0f, 1.0f), normal), 0.0);
	diffuse = l.power * 0.5f * diffuse / tz::math::pow(distance, 1.0f);
	return diffuse;
}

float specular(point_light_data l, vec3 normal, bool is_2d)
{
	const vec3 view_dir = vec3(0.0f, 0.0f, 1.0f);
	vec3 light_dir = l.position - in::position;
	if(is_2d)
	{
		light_dir.z = 0.0f;
	}
	float distance = length(light_dir) + 1.0f;
	light_dir = normalize(light_dir);

	float specular = pow(max(dot(normal, vec3(0.0f, 0.0f, 1.0f)), 0.0), 8);
	specular = l.power * specular / tz::math::pow(distance, 1.0f);
	return specular;
}

void main()
{
	vec4 outcol = vec4(vec3(0.0f), 1.0f);
	vec3 normal = in::normal;
	bool should_pixelate = bool(in::joint_suffix.x);

	texture_locator base_colour = in::textures[0];
	if(base_colour.texture_id == BADU)
	{
		// use solid white.
		outcol = vec4(base_colour.colour_tint, 1.0f);
	}
	else
	{
		vec4 col = texture(res::textures[base_colour.texture_id], in::texcoord * base_colour.texture_scale);
		if(col.w < 0.1f)
		{
			discard;
			return;
		}
		outcol.xyz = col.xyz * base_colour.colour_tint;
	}
	texture_locator normaltex = in::textures[1];
	if(normaltex.texture_id != BADU)
	{
		// green contains roughness values, blue contains metalness values.
		vec3 sampled_normal = (255.0f / 128.0f * texture(res::textures[normaltex.texture_id], in::texcoord * normaltex.texture_scale).rgb) - 1;
		normal = sampled_normal;
	}
	else if(!should_pixelate)
	{
		// we dont have a normal map applied, but we shouldnt pixelate (i.e we're a 2d sprite)
		// hardcode normal to smooth 0, 0, 1
		normal = vec3(0.0f, 0.0f, 1.0f);
	}
	outcol.xyz *= in::colour;
	outcol.xyz *= light.ambient_light_colour;

	normal = normalize(normal);
	vec4 directional_light_contribution = vec4(light.directional_light_colour * diffuse_directional(normal, !should_pixelate), 0.0f);
	outcol.xyz += directional_light_contribution.xyz;
	for(uint i = 0; i < light.point_light_count; i++)
	{
		point_light_data l = light.point_lights[i];
		vec4 light_contribution = vec4(l.colour * diffuse(l, normal, !should_pixelate) * specular(l, normal, !should_pixelate), 0.0f); 
		outcol.xyz += light_contribution.xyz;
	}

	if(should_pixelate)
	{
		// make our depth really really close to 0.
		// if we assume in::fragment_coord.z is between 0 and 1, we make our depth between 0.999-1.0, but still preserving depth order.
		// this means that the fragment we write into the unpixelated colour is almost *certainly* gonna be overwritten by something else.
		// however, the pixelated buffer will *only* contain fragments with this depth operation applied, so the depth test is preserved (if way less accurate. we're a 2d game, who cares???)
		//out::fragment_depth = 0.999f + (in::fragment_coord.z / 1000.0f);
		out::colour = vec4(0.0);
		out::pixelated_colour = outcol;
	}
	else
	{
		// stupid rule if any path writes to depth, all must do.
		// just write what the depth was gonna be anyway.
		//out::fragment_depth = in::fragment_coord.z;
		out::colour = outcol;
		out::pixelated_colour = vec4(0.0);
	}

	//for(uint i = 0; i < MAX_TEX_COUNT; i++)
	//{
	//	if(in::textures[i].texture_id == BADU)
	//	{
	//		continue;
	//	}
	//	texture_locator tex = in::textures[i];
	//	out::colour.xyz += texture(res::textures[tex.texture_id], in::texcoord).xyz * tex.colour_tint;
	//	any_texture_applied = true;
	//}
	//if(!any_texture_applied)
	//{
	//	out::colour = vec4(1.0f, 0.0f, 0.0f, 1.0f);
	//}
}
