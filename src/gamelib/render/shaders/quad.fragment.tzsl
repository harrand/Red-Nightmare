shader(type = fragment);

import "quadtex"

input(id = 0, flat) uint texid[QUAD_TEXCOUNT];
input(id = 8) float depth;
input(id = 9) vec2 texcoord;
input(id = 10) float texcoord_scales[QUAD_TEXCOUNT];
input(id = 18) vec3 tints[QUAD_TEXCOUNT];
output(id = 0) vec4 out_col;

struct render_data
{
	mat4 view;
	mat4 projection;
	bool debug_depth_view;
	bool debug_colour_view;
};
resource(id = 1) const buffer render_data_buffer
{
	render_data render;
};

resource(id = 2) const texture images[];

import <noise>

void main()
{
	out::fragment_depth = depth;
	out_col = vec4(0.0, 0.0, 0.0, 0.0);
	for(uint i = 0; i < QUAD_TEXCOUNT; i++)
	{
		vec4 cur_col = texture(images[texid[i]], texcoord * texcoord_scales[i]) * vec4(tints[i], 1.0);
		if(cur_col.a == 1.0f)
		{
			out_col = cur_col;
			break;
		}
	}
	#if TZ_DEBUG
		if(render.debug_colour_view)
		{
			float x = tz::noise::simplex(vec2(texid[0]));
			float y = tz::noise::simplex(vec2(texid[0] * x, texid[0]));
			out_col.rgb = vec3(x, y, 1.0f - x);
		}
		else if(render.debug_depth_view)
		{
			out_col.rgb = vec3(depth);
		}
	#endif
	if(out_col.a < 1.0f)
	{
		discard;
	}
}
