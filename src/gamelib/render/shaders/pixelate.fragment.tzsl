shader(type = fragment);
import "precipitation"

resource(id = 0) const buffer zoom_buffer
{
	vec3 global_colour_multiplier;
	float value;
} zoom;

resource(id = 1) const buffer dimension_buffer
{
	float w, h;
} dimensions;

resource(id = 2) const buffer precipitation_buffer
{
	precipitation::data data;
} precipitation;

resource(id = 3) const buffer time_buffer
{
	// timer for effect
	float seconds;
} time;

resource(id = 4) const texture res::textures[];
output(id = 0) vec4 out::albedo;

void main()
{
	vec2 uv = vec2(in::fragment_coord.xy / vec2(dimensions.w, dimensions.h));	
	const float pixelate_amt = 2048.0f;
	float pixels = pixelate_amt * zoom.value;
	float dx = 1.0f / pixels;
	float dy = 1.0f / pixels;
	vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));

	vec4 colour = texture(res::textures[1], coord);
	vec4 unpixelised_colour = texture(res::textures[0], uv);
	if(colour.w == 0.0f)
	{
		if(unpixelised_colour == vec4(0.0f))
		{
			// no unpixelised colour to fallback to. we cant discard because that will be clear colour.
			// we simply have to use the unpixelised colour.
			colour = texture(res::textures[1], uv);
		}
		else
		{
			colour = unpixelised_colour;
		}
	}
	precipitation::do(uv, colour, precipitation.data, zoom.value, time.seconds);
	colour.xyz *= zoom.global_colour_multiplier;
	out::albedo = colour;
}