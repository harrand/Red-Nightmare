shader(type = fragment);

resource(id = 0) const buffer zoom_buffer
{
	vec3 global_colour_multiplier;
	float value;
} zoom;

resource(id = 1) const buffer dimension_buffer
{
	float w, h;
} dimensions;

resource(id = 2) const buffer precipitation_buffer
{
	// what colour is a droplet?
	vec3 colour;
	// how much precipitation is there (0 == none)
	float strength;
	// what general direction should the droplets be moving?
	vec2 direction;
} precipitation;

resource(id = 3) const buffer time_buffer
{
	// timer for effect
	float seconds;
} time;

resource(id = 4) const texture res::textures[];
//output(id = 0) vec4 out::frag_colour;
output(id = 0) vec4 out::albedo;

void do_precipitation(vec2 uv, inout vec4 colour);

void main()
{
	vec2 uv = vec2(in::fragment_coord.xy / vec2(dimensions.w, dimensions.h));	
	const float pixelate_amt = 2048.0f;
	float pixels = pixelate_amt * zoom.value;
	float dx = 1.0f / pixels;
	float dy = 1.0f / pixels;
	vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));
	//coord += vec2(-0.5, -0.5);
	//coord *= zoom.value;
	//coord -= vec2(-0.5, -0.5);

	vec4 colour = texture(res::textures[1], coord);
	//out::frag_colour = texture(res::textures[1], coord);
	vec4 unpixelised_colour = texture(res::textures[0], uv);
	// TODO: triage this. was having a bug where 2d sprites (unpixelised stuff) would become invisible if the clear colour wasnt transparent black.
	// note: if transparency is 0.1 this would also completely ignore unpixelised. do we want this? other option: mix by amount equivalent to w (i.e manual alpha blend)
	//if(out::frag_colour == vec4(0.0))
	if(colour.w == 0.0f)
	{
		if(unpixelised_colour == vec4(0.0f))
		{
			// no unpixelised colour to fallback to. we cant discard because that will be clear colour.
			// we simply have to use the unpixelised colour.
			colour = texture(res::textures[1], uv);
		}
		else
		{
			colour = unpixelised_colour;
		}
	}
	do_precipitation(uv, colour);
	colour.xyz *= zoom.global_colour_multiplier;
	out::albedo = colour;
}

// Simplex noise function (for generating noise)
vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289((x * 34.0 + 1.0) * x);
}

float simplexNoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0
                        0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
                        -0.577350269189626, // -1.0 + 2.0 * C.x
                        0.024390243902439); // 1.0 / 41.0
    vec2 i = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);

    vec2 i1;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);

    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    i = mod289(i);
    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))
                     + i.x + vec3(0.0, i1.x, 1.0));

    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

void do_precipitation(vec2 uv, inout vec4 colour)
{
	float warp = sqrt(abs(zoom.value));
	vec2 animated_uv = uv + precipitation.direction * time.seconds / (warp * 4);
	float strength = min(precipitation.strength * warp, 1.0);

	vec2 repeating_uv = fract(animated_uv * 10.0f);
	float noise = simplexNoise(repeating_uv * 10.0f);
	float drops = smoothstep(1.0f - strength, 1.0f, noise);

	vec3 contribution = mix(vec3(0.0f), precipitation.colour, drops);
	if(contribution != vec3(0.0))
	{
		colour.xyz += contribution;
		// -1 alpha means its an overlay onto the scene in some way (e.g precipitation) and shouldn't be affected by lighting
		colour.w = -1.0f;
	}
}