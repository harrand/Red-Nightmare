shader(type = fragment);

resource(id = 0) const buffer zoom_buffer
{
	vec3 global_colour_multiplier;
	float value;
} zoom;

resource(id = 1) const buffer dimension_buffer
{
	float w, h;
} dimensions;

resource(id = 2) const texture res::textures[];
output(id = 0) vec4 out::frag_colour;

void main()
{
	vec2 uv = vec2(in::fragment_coord.xy / vec2(dimensions.w, dimensions.h));	
	const float pixelate_amt = 2048.0f;
	float pixels = pixelate_amt * zoom.value;
	float dx = 1.0f / pixels;
	float dy = 1.0f / pixels;
	vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));
	//coord += vec2(-0.5, -0.5);
	//coord *= zoom.value;
	//coord -= vec2(-0.5, -0.5);

	out::frag_colour = texture(res::textures[1], coord);
	vec4 unpixelised_colour = texture(res::textures[0], uv);
	// TODO: triage this. was having a bug where 2d sprites (unpixelised stuff) would become invisible if the clear colour wasnt transparent black.
	// note: if transparency is 0.1 this would also completely ignore unpixelised. do we want this? other option: mix by amount equivalent to w (i.e manual alpha blend)
	//if(out::frag_colour == vec4(0.0))
	if(out::frag_colour.w == 0.0f)
	{
		out::frag_colour = unpixelised_colour;
	}
	out::frag_colour.xyz *= zoom.global_colour_multiplier;
}
