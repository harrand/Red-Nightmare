shader(type = fragment);
#define LIGHT_SHAPE_NORMAL 0
#define LIGHT_SHAPE_RING 1


resource(id = 0) const buffer dimension_buffer
{
	float w, h;
} dimensions;

struct point_light_data
{
	vec3 position;
	uint shape;
	vec3 colour;
	float power;
};

resource(id = 1) const buffer res::light_buffer
{
	vec3 ambient_light_colour;
	float directional_light_power;
	vec3 directional_light_colour;
	vec3 directional_light_direction;
	uint point_light_count;
	point_light_data point_lights[];	
} light;

resource(id = 2) const texture res::textures[];
output(id = 0) vec4 out::frag_colour;

void do_precipitation(vec2 uv);

// Phong Shading
float diffuse_directional(vec3 normal, bool is_2d)
{
	if(is_2d)
	{
		//return 0.0f;
	}
	vec3 light_dir = normalize(light.directional_light_direction);
	float diffuse = max(dot(light_dir, normal), 0.0f);
	diffuse = light.directional_light_power * 0.5f * diffuse;
	return diffuse;
}

float distort_distance(uint shape, float dst)
{
	// ring light:
	if(shape == LIGHT_SHAPE_RING)
	{
		const float ring_radius = 2.75f;
		const float ring_thickness = 5.0f;
		if(dst > (ring_radius + ring_thickness))
		{
			return dst;
		}
		float amt = max(dst - ring_radius, 0.0f);
		return log(amt);
	}
	return dst;
}

float diffuse(point_light_data l, vec3 normal, vec3 position, bool is_2d)
{
	vec3 lightDir = l.position - position;
	if(is_2d)
	{
		lightDir.z = normal.z;
	}
	else
	{
		// ignore far z distances for 3d.
		lightDir.z = clamp(lightDir.z, -1.0, 1.0);
	}
	float distance = length(lightDir.xy) + 2.0f;
	lightDir = normalize(lightDir);
	distance = distort_distance(l.shape, distance);

	// Calculate the diffuse lighting component using the Phong diffuse lighting model
	float diffuse = max(dot(lightDir, normal), 0.0);
	diffuse = l.power * 0.5f * diffuse / pow(distance, 2);
	// slightly brightened circle around the light source so it actually illuminates.
	if(distance < l.power * 8.0)
	{
		diffuse = dot(lightDir, normal) * max(diffuse, 0.3);	
		if(distance > l.power * 4.0)
		{
			diffuse *= smoothstep(l.power * 8.0, l.power * 4.0, distance);
		}
	}
	return diffuse;
}

float specular(point_light_data l, vec3 normal, vec3 position, bool is_2d)
{
	if(l.shape == LIGHT_SHAPE_RING)
	{
		return 0.0f;
	}
	const vec3 view_dir = vec3(0.0f, 0.0f, 1.0f);
	vec3 light_dir = l.position - position;
	if(is_2d)
	{
		light_dir.z = normal.z;
	}
	else
	{
		// ignore far z distances for 3d.
		light_dir.z = clamp(light_dir.z, -1.0, 1.0);
	}
	float distance = length(light_dir.xy) + 0.1f;
	light_dir = normalize(light_dir);

	float specular = pow(max(dot(normal, light_dir), 0.0), 8);
	specular = l.power * specular / pow(distance, 2);
	return specular;
}

vec3 blur(vec2 uv);

void main()
{
	vec2 uv = vec2(in::fragment_coord.xy / vec2(dimensions.w, dimensions.h));	
	vec3 position = texture(res::textures[0], uv).rgb;
	vec4 normal_rgba = texture(res::textures[1], uv);
	vec3 normal = normal_rgba.rgb;
	bool should_pixelate = bool(normal_rgba.w);
	vec4 albedo_rgba = texture(res::textures[2], uv);
	vec3 albedo = albedo_rgba.rgb;
	bool affected_by_lighting = albedo_rgba.w != -1.0f;
	//out::frag_colour = texture(res::textures[2], uv);
	vec3 outcol = albedo;

	if(affected_by_lighting)
	{
		vec4 directional_light_contribution = max(vec4(light.directional_light_colour * diffuse_directional(normal, !should_pixelate), 0.0f), vec4(0.0f));
		outcol.xyz += directional_light_contribution.xyz;
		outcol.xyz *= light.ambient_light_colour;
		for(uint i = 0; i < light.point_light_count; i++)
		{
			point_light_data l = light.point_lights[i];
			vec4 light_contribution = max(vec4(l.colour * min(diffuse(l, normal, position, !should_pixelate) + specular(l, normal, position, !should_pixelate), 2.0f), 0.0f), vec4(0.0f)); 
			outcol.xyz += light_contribution.xyz;
		}
	}

	out::frag_colour = vec4(outcol + blur(uv), 1.0);
}

vec3 blur(vec2 uv)
{
	// basic box blur
	const float blur_radius = 6.0f;
	vec2 tex_offset = 1.0f / textureSize(res::textures[3], 0);	
	vec3 result = vec3(0.0f);

	float count = 0.0f;
	for(float x = -blur_radius; x <= blur_radius; x++)
	{
        for(float y = -blur_radius; y <= blur_radius; y++) {
            vec2 offset = vec2(x, y) * tex_offset;
            result += texture(res::textures[3], uv + offset).rgb;
            count += 1.0;
        }
    }

    result /= count; // average the color values	
	return result;
}