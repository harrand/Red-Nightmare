shader(type = vertex);

import "statuseffect"

vec3 status_effect_colours[StatusEffect_Count] = vec3[](
	vec3(0.5f, 0.5f, 0.5f),
	vec3(0.3f, 0.3f, 1.0f),
	vec3(0.3f, 1.0f, 0.3f)
);

vec2 quad_positions[6] = vec2[](
	vec2(-1.0, -1.0), vec2(1.0, 1.0), vec2(1.0, -1.0),
	vec2(-1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0, 1.0)
);

vec2 quad_texcoords[6] = vec2[](
	vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0),
	vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0)
);

struct ElementData
{
	vec2 position;
	vec2 scale;
	float rotation;
	uint texture_id;
	uint status_effect_id;
};

resource(id = 0) const buffer ElementBuffer
{
	ElementData data[];
} element;

output(id = 0) uint out_texture_id;
output(id = 1) vec2 out_texcoord;
output(id = 2) vec3 out_colour_offset;

void main()
{
	const uint quad_id = in::vertex_id / 6;
	ElementData elem = element.data[quad_id];

	vec2 pos = elem.position + quad_positions[in::vertex_id % 6] * elem.scale;
	out::position = vec4(pos, 0.0, 1.0);
	out_texture_id = elem.texture_id;
	out_texcoord = quad_texcoords[in::vertex_id % 6];
	out_colour_offset = status_effect_colours[elem.status_effect_id];
}
